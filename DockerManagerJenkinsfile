pipeline {
    agent any
    
    parameters {
        choice(
            name: 'ACTION',
            choices: ['start', 'stop', 'restart', 'status'],
            description: 'Select the action to perform on Docker containers'
        )
        choice(
            name: 'CONTAINER_TARGET',
            choices: ['all', 'express-app', 'specific'],
            description: 'Select which containers to manage'
        )
        string(
            name: 'SPECIFIC_CONTAINER',
            defaultValue: '',
            description: 'Enter specific container name/ID (only used when CONTAINER_TARGET is "specific")'
        )
        booleanParam(
            name: 'FORCE_REMOVE',
            defaultValue: false,
            description: 'Force remove containers when stopping (use with caution)'
        )
        choice(
            name: 'IMAGE_ACTION',
            choices: ['none', 'pull-latest', 'rebuild'],
            description: 'Additional image actions to perform'
        )
    }
    
    environment {
        DOCKER_HUB_REPO = 'muddythunder/express-app'
        DOCKER_HUB_CREDENTIALS = 'c71d37ab-7559-4e0e-a3ea-fcf087717f4e'
        APP_NAME = 'express-app'
        CONTAINER_NAME = "${APP_NAME}-container"
    }

    stages {
        stage('üîç Docker Environment Check') {
            steps {
                echo "=== CHECKING DOCKER ENVIRONMENT ==="
                script {
                    sh '''
                        echo "üê≥ Docker version:"
                        docker --version
                        
                        echo "üìä Docker system info:"
                        docker info | head -20
                        
                        echo "üìã Current Docker containers:"
                        docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"
                        
                        echo "üñºÔ∏è Available Docker images:"
                        docker images --format "table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\\t{{.CreatedAt}}"
                    '''
                }
            }
        }
        
        stage('üîÑ Image Management') {
            when {
                not { 
                    equals expected: 'none', actual: params.IMAGE_ACTION 
                }
            }
            steps {
                echo "=== MANAGING DOCKER IMAGES ==="
                script {
                    if (params.IMAGE_ACTION == 'pull-latest') {
                        withCredentials([usernamePassword(credentialsId: env.DOCKER_HUB_CREDENTIALS, 
                                                        usernameVariable: 'DOCKER_USERNAME', 
                                                        passwordVariable: 'DOCKER_PASSWORD')]) {
                            sh '''
                                echo "üîê Logging into Docker Hub..."
                                echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
                                
                                echo "üì• Pulling latest image from Docker Hub..."
                                docker pull ${DOCKER_HUB_REPO}:latest
                                
                                echo "üßπ Logging out from Docker Hub..."
                                docker logout
                            '''
                        }
                    } else if (params.IMAGE_ACTION == 'rebuild') {
                        sh '''
                            echo "üèóÔ∏è Rebuilding Docker image from source..."
                            if [ -f Dockerfile ]; then
                                docker build -t ${DOCKER_HUB_REPO}:latest .
                                echo "‚úÖ Image rebuilt successfully"
                            else
                                echo "‚ùå No Dockerfile found in current directory"
                                exit 1
                            fi
                        '''
                    }
                }
            }
        }
        
        stage('üöÄ Container Management') {
            steps {
                echo "=== PERFORMING CONTAINER MANAGEMENT ==="
                script {
                    def containerTarget = params.CONTAINER_TARGET
                    def action = params.ACTION
                    def specificContainer = params.SPECIFIC_CONTAINER
                    def forceRemove = params.FORCE_REMOVE
                    
                    switch(action) {
                        case 'start':
                            startContainers(containerTarget, specificContainer)
                            break
                        case 'stop':
                            stopContainers(containerTarget, specificContainer, forceRemove)
                            break
                        case 'restart':
                            restartContainers(containerTarget, specificContainer)
                            break
                        case 'status':
                            checkContainerStatus(containerTarget, specificContainer)
                            break
                        default:
                            error "Unknown action: ${action}"
                    }
                }
            }
        }
        
        stage('üîç Post-Action Verification') {
            steps {
                echo "=== VERIFYING CONTAINER STATES ==="
                script {
                    sh '''
                        echo "üìä Current container status:"
                        docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"
                        
                        echo "üíæ System resource usage:"
                        docker system df
                        
                        if [ "${ACTION}" = "start" ]; then
                            echo "üîç Testing running containers..."
                            
                            # Check if express-app container is running and accessible
                            if docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "${CONTAINER_NAME}"; then
                                echo "‚úÖ Express app container is running"
                                
                                # Get the port mapping
                                CONTAINER_PORT=$(docker port ${CONTAINER_NAME} 3000 2>/dev/null || echo "Port mapping not found")
                                echo "üåê Port mapping: ${CONTAINER_PORT}"
                                
                                # Try to access the health endpoint if port is mapped
                                if [[ "$CONTAINER_PORT" == *":"* ]]; then
                                    HOST_PORT=$(echo $CONTAINER_PORT | cut -d':' -f2)
                                    echo "üè• Testing health endpoint on port $HOST_PORT..."
                                    
                                    max_attempts=3
                                    attempt=1
                                    
                                    while [ $attempt -le $max_attempts ]; do
                                        if curl -f http://localhost:$HOST_PORT/health > /dev/null 2>&1; then
                                            echo "‚úÖ Application health check passed on port $HOST_PORT"
                                            break
                                        else
                                            if [ $attempt -eq $max_attempts ]; then
                                                echo "‚ö†Ô∏è Health check failed after $max_attempts attempts"
                                            else
                                                echo "‚ö†Ô∏è Health check attempt $attempt failed, retrying..."
                                                sleep 2
                                            fi
                                        fi
                                        attempt=$((attempt + 1))
                                    done
                                fi
                            else
                                echo "‚ÑπÔ∏è Express app container not running or not found"
                            fi
                        fi
                    '''
                }
            }
        }
    }
    
    post {
        always {
            echo "üèÅ === DOCKER MANAGEMENT COMPLETED ==="
            echo "üìä Action performed: ${params.ACTION}"
            echo "üéØ Target: ${params.CONTAINER_TARGET}"
            if (params.CONTAINER_TARGET == 'specific' && params.SPECIFIC_CONTAINER) {
                echo "üìù Specific container: ${params.SPECIFIC_CONTAINER}"
            }
        }
        
        success {
            echo "üéâ === DOCKER MANAGEMENT SUCCEEDED ==="
            script {
                sh '''
                    echo "üìã Final container summary:"
                    docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}" | head -10
                '''
            }
        }
        
        failure {
            echo "üí• === DOCKER MANAGEMENT FAILED ==="
            echo "‚ùå Check the logs above for details"
            script {
                try {
                    sh '''
                        echo "üîç Docker system diagnostics:"
                        docker system events --since 5m --until now || true
                        echo "üìÑ Docker daemon logs (if accessible):"
                        docker system info | grep -A 5 -B 5 "ERROR\\|WARN" || true
                    '''
                } catch (Exception e) {
                    echo "Could not retrieve Docker diagnostics"
                }
            }
        }
    }
}

// Helper function to start containers
def startContainers(containerTarget, specificContainer) {
    switch(containerTarget) {
        case 'all':
            sh '''
                echo "üöÄ Starting all stopped containers..."
                STOPPED_CONTAINERS=$(docker ps -aq --filter "status=exited")
                
                if [ -n "$STOPPED_CONTAINERS" ]; then
                    echo "üìã Found stopped containers:"
                    docker ps -a --filter "status=exited" --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
                    
                    echo "‚ñ∂Ô∏è Starting containers..."
                    docker start $STOPPED_CONTAINERS
                    
                    echo "‚úÖ All stopped containers started"
                else
                    echo "‚ÑπÔ∏è No stopped containers found"
                fi
            '''
            break
            
        case 'express-app':
            sh '''
                echo "üöÄ Managing Express app container..."
                
                # Check if container exists
                if docker ps -a --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
                    # Container exists, start it
                    echo "üì¶ Starting existing Express app container..."
                    docker start ${CONTAINER_NAME}
                    echo "‚úÖ Express app container started"
                else
                    # Container doesn't exist, create and run it
                    echo "üèóÔ∏è Creating new Express app container..."
                    
                    # Stop any container using port 3001
                    docker stop $(docker ps -q --filter "publish=3001") 2>/dev/null || true
                    
                    # Run new container
                    docker run -d --name ${CONTAINER_NAME} -p 3001:3000 ${DOCKER_HUB_REPO}:latest
                    echo "‚úÖ New Express app container created and started on port 3001"
                fi
            '''
            break
            
        case 'specific':
            if (!specificContainer) {
                error "Specific container name must be provided when CONTAINER_TARGET is 'specific'"
            }
            sh """
                echo "üöÄ Starting specific container: ${specificContainer}"
                
                if docker ps -a --filter "name=${specificContainer}" | grep -q "${specificContainer}"; then
                    docker start ${specificContainer}
                    echo "‚úÖ Container '${specificContainer}' started"
                else
                    echo "‚ùå Container '${specificContainer}' not found"
                    exit 1
                fi
            """
            break
            
        default:
            error "Unknown container target: ${containerTarget}"
    }
}

// Helper function to stop containers
def stopContainers(containerTarget, specificContainer, forceRemove) {
    switch(containerTarget) {
        case 'all':
            sh """
                echo "üõë Stopping all running containers..."
                RUNNING_CONTAINERS=\$(docker ps -q)
                
                if [ -n "\$RUNNING_CONTAINERS" ]; then
                    echo "üìã Found running containers:"
                    docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
                    
                    echo "‚èπÔ∏è Stopping containers..."
                    docker stop \$RUNNING_CONTAINERS
                    
                    if [ "${forceRemove}" = "true" ]; then
                        echo "üóëÔ∏è Force removing containers..."
                        docker rm \$RUNNING_CONTAINERS
                        echo "‚úÖ All containers stopped and removed"
                    else
                        echo "‚úÖ All containers stopped"
                    fi
                else
                    echo "‚ÑπÔ∏è No running containers found"
                fi
            """
            break
            
        case 'express-app':
            sh """
                echo "üõë Stopping Express app container..."
                
                if docker ps --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
                    docker stop ${CONTAINER_NAME}
                    echo "‚úÖ Express app container stopped"
                    
                    if [ "${forceRemove}" = "true" ]; then
                        docker rm ${CONTAINER_NAME}
                        echo "üóëÔ∏è Express app container removed"
                    fi
                else
                    echo "‚ÑπÔ∏è Express app container not running"
                fi
            """
            break
            
        case 'specific':
            if (!specificContainer) {
                error "Specific container name must be provided when CONTAINER_TARGET is 'specific'"
            }
            sh """
                echo "üõë Stopping specific container: ${specificContainer}"
                
                if docker ps --filter "name=${specificContainer}" | grep -q "${specificContainer}"; then
                    docker stop ${specificContainer}
                    echo "‚úÖ Container '${specificContainer}' stopped"
                    
                    if [ "${forceRemove}" = "true" ]; then
                        docker rm ${specificContainer}
                        echo "üóëÔ∏è Container '${specificContainer}' removed"
                    fi
                else
                    echo "‚ÑπÔ∏è Container '${specificContainer}' not running"
                fi
            """
            break
            
        default:
            error "Unknown container target: ${containerTarget}"
    }
}

// Helper function to restart containers
def restartContainers(containerTarget, specificContainer) {
    switch(containerTarget) {
        case 'all':
            sh '''
                echo "üîÑ Restarting all containers..."
                ALL_CONTAINERS=$(docker ps -aq)
                
                if [ -n "$ALL_CONTAINERS" ]; then
                    echo "üìã Found containers:"
                    docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}"
                    
                    echo "üîÑ Restarting containers..."
                    docker restart $ALL_CONTAINERS
                    echo "‚úÖ All containers restarted"
                else
                    echo "‚ÑπÔ∏è No containers found"
                fi
            '''
            break
            
        case 'express-app':
            sh '''
                echo "üîÑ Restarting Express app container..."
                
                if docker ps -a --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
                    docker restart ${CONTAINER_NAME}
                    echo "‚úÖ Express app container restarted"
                else
                    echo "‚ùå Express app container not found"
                    exit 1
                fi
            '''
            break
            
        case 'specific':
            if (!specificContainer) {
                error "Specific container name must be provided when CONTAINER_TARGET is 'specific'"
            }
            sh """
                echo "üîÑ Restarting specific container: ${specificContainer}"
                
                if docker ps -a --filter "name=${specificContainer}" | grep -q "${specificContainer}"; then
                    docker restart ${specificContainer}
                    echo "‚úÖ Container '${specificContainer}' restarted"
                else
                    echo "‚ùå Container '${specificContainer}' not found"
                    exit 1
                fi
            """
            break
            
        default:
            error "Unknown container target: ${containerTarget}"
    }
}

// Helper function to check container status
def checkContainerStatus(containerTarget, specificContainer) {
    switch(containerTarget) {
        case 'all':
            sh '''
                echo "üìä Checking status of all containers..."
                
                echo "üîç All containers (running and stopped):"
                docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}\\t{{.Size}}"
                
                echo "üìà Running containers only:"
                docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"
                
                echo "üíæ Container resource usage:"
                docker stats --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}"
            '''
            break
            
        case 'express-app':
            sh '''
                echo "üìä Checking Express app container status..."
                
                if docker ps -a --filter "name=${CONTAINER_NAME}" | grep -q "${CONTAINER_NAME}"; then
                    echo "üìã Container details:"
                    docker ps -a --filter "name=${CONTAINER_NAME}" --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"
                    
                    echo "üîç Container inspection:"
                    docker inspect ${CONTAINER_NAME} --format "{{.State.Status}} - {{.State.Health.Status}} - {{.NetworkSettings.Ports}}"
                    
                    if docker ps --filter "name=${CONTAINER_NAME}" --filter "status=running" | grep -q "${CONTAINER_NAME}"; then
                        echo "üìà Container resource usage:"
                        docker stats ${CONTAINER_NAME} --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}"
                        
                        echo "üìÑ Recent container logs:"
                        docker logs ${CONTAINER_NAME} --tail 10
                    fi
                else
                    echo "‚ùå Express app container not found"
                fi
            '''
            break
            
        case 'specific':
            if (!specificContainer) {
                error "Specific container name must be provided when CONTAINER_TARGET is 'specific'"
            }
            sh """
                echo "üìä Checking status of container: ${specificContainer}"
                
                if docker ps -a --filter "name=${specificContainer}" | grep -q "${specificContainer}"; then
                    echo "üìã Container details:"
                    docker ps -a --filter "name=${specificContainer}" --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}\\t{{.Ports}}"
                    
                    echo "üîç Container inspection:"
                    docker inspect ${specificContainer} --format "{{.State.Status}} - {{.State.Health.Status}} - {{.NetworkSettings.Ports}}"
                    
                    if docker ps --filter "name=${specificContainer}" --filter "status=running" | grep -q "${specificContainer}"; then
                        echo "üìà Container resource usage:"
                        docker stats ${specificContainer} --no-stream --format "table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.NetIO}}"
                        
                        echo "üìÑ Recent container logs:"
                        docker logs ${specificContainer} --tail 10
                    fi
                else
                    echo "‚ùå Container '${specificContainer}' not found"
                fi
            """
            break
            
        default:
            error "Unknown container target: ${containerTarget}"
    }
}
