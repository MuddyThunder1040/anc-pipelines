pipeline {
    agent any
    
    environment {
        NODE_VERSION = '18'
        APP_NAME = 'express-app'
        DOCKER_IMAGE = "${APP_NAME}:${BUILD_NUMBER}"
    }

    stages {
        stage('🔍 Checkout') {
            steps {
                echo "=== CHECKING OUT SOURCE CODE ==="
                git url: 'https://github.com/MuddyThunder1040/appserver.git', branch: 'main'
                echo "✅ Source code checked out successfully"
            }
        }
        
        stage('🔧 Setup Node.js') {
            steps {
                echo "=== SETTING UP NODE.JS ENVIRONMENT ==="
                sh '''
                    echo "📋 Node.js version check:"
                    node --version
                    echo "📦 NPM version check:"
                    npm --version
                '''
            }
        }
        
        stage('📦 Install Dependencies') {
            steps {
                echo "=== INSTALLING DEPENDENCIES ==="
                sh '''
                    echo "🔍 Checking package.json..."
                    if [ -f package.json ]; then
                        echo "📥 Installing all dependencies (including dev dependencies for testing)..."
                        npm ci
                        echo "✅ Dependencies installed successfully"
                        
                        echo "📋 Installed packages summary:"
                        npm list --depth=0 || true
                    else
                        echo "❌ No package.json found"
                        exit 1
                    fi
                '''
            }
        }
        
        stage('🧪 Run Tests') {
            steps {
                echo "=== RUNNING COMPREHENSIVE TEST SUITE ==="
                script {
                    try {
                        sh '''
                            echo "🧪 Running Jest test suite..."
                            npm test
                            
                            echo "📊 Generating test coverage report..."
                            npm run test:coverage
                            
                            echo "✅ All tests passed successfully"
                        '''
                    } catch (Exception e) {
                        echo "❌ Tests failed: ${e.getMessage()}"
                        sh '''
                            echo "📄 Test failure details:"
                            npm test -- --verbose || true
                        '''
                        error "Test stage failed"
                    }
                }
            }
            post {
                always {
                    script {
                        // Archive test results and coverage if available
                        if (fileExists('coverage/')) {
                            echo "📈 Archiving test coverage reports..."
                            archiveArtifacts artifacts: 'coverage/**/*', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
        
        stage('🔍 Code Quality Check') {
            steps {
                echo "=== CODE QUALITY ANALYSIS ==="
                sh '''
                    echo "📊 Checking file structure..."
                    ls -la
                    
                    echo "🔍 Checking server.js syntax..."
                    node -c server.js
                    
                    echo "🔍 Checking database.js syntax..."
                    if [ -f database.js ]; then
                        node -c database.js
                        echo "✅ Database module syntax check passed"
                    fi
                    
                    echo "📋 Verifying SQLite database setup..."
                    if [ -f database.js ]; then
                        echo "✅ Database module found"
                    else
                        echo "⚠️ No database module found"
                    fi
                    
                    echo "🔍 Checking Docker configuration..."
                    if [ -f Dockerfile ]; then
                        echo "✅ Dockerfile found"
                    fi
                    if [ -f docker-compose.yml ]; then
                        echo "✅ Docker Compose configuration found"
                    fi
                    
                    echo "✅ Code quality check passed"
                '''
            }
        }
        
        stage('🐳 Build Docker Image') {
            steps {
                echo "=== BUILDING DOCKER IMAGE ==="
                script {
                    try {
                        sh """
                            echo "🔍 Checking Docker availability..."
                            docker --version
                            docker info
                            
                            echo "🏗️ Building Docker image: ${DOCKER_IMAGE}"
                            docker build -t ${DOCKER_IMAGE} .
                            echo "✅ Docker image built successfully"
                            
                            echo "📋 Docker images:"
                            docker images | grep ${APP_NAME} || echo "No previous images found"
                            
                            echo "🏷️ Tagging image as latest:"
                            docker tag ${DOCKER_IMAGE} ${APP_NAME}:latest
                        """
                    } catch (Exception e) {
                        echo "⚠️ Docker build failed: ${e.getMessage()}"
                        echo "🔄 Continuing pipeline without Docker image..."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('🚀 Deploy Application') {
            steps {
                echo "=== DEPLOYING APPLICATION ==="
                script {
                    sh '''
                        echo "🎯 Starting deployment process..."
                        
                        # Stop any existing process on port 3000
                        echo "🛑 Stopping existing services..."
                        pkill -f "node server.js" || true
                        
                        # Stop any existing Docker containers on port 3000 (if Docker is accessible)
                        if docker info > /dev/null 2>&1; then
                            echo "🐳 Stopping Docker containers on port 3000..."
                            docker stop $(docker ps -q --filter "publish=3000") 2>/dev/null || true
                        else
                            echo "⚠️ Docker not accessible, skipping Docker container cleanup"
                        fi
                        
                        # Wait a moment for cleanup
                        sleep 2
                        
                        echo "� Initializing database..."
                        # Pre-initialize database to ensure it's ready
                        timeout 10s node -e "
                            const Database = require('./database');
                            const db = new Database();
                            db.initialize().then(() => {
                                console.log('✅ Database initialized successfully');
                                process.exit(0);
                            }).catch(err => {
                                console.error('❌ Database initialization failed:', err);
                                process.exit(1);
                            });
                        " || echo "⚠️ Database initialization timeout (may already be running)"
                        
                        echo "�🚀 Starting Express application with database..."
                        nohup node server.js > app.log 2>&1 &
                        
                        # Give the app more time to start (database initialization)
                        sleep 5
                        
                        echo "🔍 Checking if application is running..."
                        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
                            echo "✅ Application deployed successfully!"
                            echo "🌐 Application is running at: http://localhost:3000"
                            echo "📊 Database endpoints available at:"
                            echo "   - GET /users (View all users)"
                            echo "   - POST /users (Create user)"
                            echo "   - GET /admin/logs (View activity logs)"
                            echo "   - GET /admin/stats (Database statistics)"
                        else
                            echo "❌ Application failed to start"
                            echo "📄 Application logs:"
                            cat app.log || echo "No logs available"
                            exit 1
                        fi
                    '''
                }
            }
        }
        
        stage('🐳 Docker Deploy (Optional)') {
            when {
                expression { return currentBuild.result != 'UNSTABLE' }
            }
            steps {
                echo "=== DEPLOYING WITH DOCKER ==="
                script {
                    try {
                        sh """
                            echo "🐳 Testing Docker deployment on port 3001..."
                            
                            # Stop any existing Docker containers for this app
                            docker stop ${APP_NAME}-container 2>/dev/null || true
                            docker rm ${APP_NAME}-container 2>/dev/null || true
                            
                            # Run the Docker container on port 3001 (to avoid conflict with port 3000)
                            docker run -d --name ${APP_NAME}-container -p 3001:3000 ${DOCKER_IMAGE}
                            
                            # Wait for container to start
                            sleep 5
                            
                            # Test Docker deployment
                            if curl -f http://localhost:3001 > /dev/null 2>&1; then
                                echo "✅ Docker deployment successful!"
                                echo "🐳 Docker container running at: http://localhost:3001"
                            else
                                echo "⚠️ Docker deployment test failed"
                                docker logs ${APP_NAME}-container
                            fi
                        """
                    } catch (Exception e) {
                        echo "⚠️ Docker deployment failed: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('✅ Health Check') {
            steps {
                echo "=== PERFORMING COMPREHENSIVE HEALTH CHECK ==="
                sh '''
                    echo "🏥 Running health checks..."
                    
                    echo "🔍 Testing application health endpoint..."
                    health_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/health)
                    
                    if [ "$health_response" = "200" ]; then
                        echo "✅ Health check passed - Application is healthy (HTTP: $health_response)"
                    else
                        echo "❌ Health check failed - HTTP status: $health_response"
                        exit 1
                    fi
                    
                    echo "🔍 Testing main application endpoint..."
                    main_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
                    
                    if [ "$main_response" = "200" ] || [ "$main_response" = "302" ]; then
                        echo "✅ Main endpoint responding (HTTP: $main_response)"
                    else
                        echo "⚠️ Main endpoint unusual response: $main_response"
                    fi
                    
                    echo "📊 Testing database endpoints..."
                    users_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/users)
                    
                    if [ "$users_response" = "200" ]; then
                        echo "✅ Database endpoints responding (HTTP: $users_response)"
                        
                        echo "� Testing API functionality..."
                        api_response=$(curl -s http://localhost:3000/api)
                        echo "📋 API Response: $api_response"
                        
                        echo "📊 Testing admin endpoints..."
                        admin_logs_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/admin/logs)
                        admin_stats_response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/admin/stats)
                        
                        if [ "$admin_logs_response" = "200" ] && [ "$admin_stats_response" = "200" ]; then
                            echo "✅ Admin dashboard endpoints responding"
                        else
                            echo "⚠️ Admin endpoints: logs=$admin_logs_response, stats=$admin_stats_response"
                        fi
                    else
                        echo "⚠️ Database endpoints response: $users_response"
                    fi
                    
                    echo "📈 Performance check..."
                    time curl -s http://localhost:3000/health > /dev/null
                    
                    echo "📊 Application status: HEALTHY ✅"
                '''
            }
        }
        
        stage('🗄️ Database Validation') {
            steps {
                echo "=== VALIDATING DATABASE FUNCTIONALITY ==="
                sh '''
                    echo "🔍 Testing database operations..."
                    
                    # Test user creation
                    echo "👤 Testing user creation..."
                    create_response=$(curl -s -X POST http://localhost:3000/users \
                        -H "Content-Type: application/json" \
                        -d "{\"name\":\"Jenkins Test User\",\"email\":\"jenkins.test@example.com\"}" \
                        -w "%{http_code}")
                    
                    if [[ "$create_response" == *"201"* ]] || [[ "$create_response" == *"200"* ]]; then
                        echo "✅ User creation test passed"
                    else
                        echo "⚠️ User creation response: $create_response"
                    fi
                    
                    # Test user retrieval
                    echo "📋 Testing user retrieval..."
                    users_data=$(curl -s http://localhost:3000/users)
                    if [[ "$users_data" == *"Jenkins Test User"* ]] || [[ "$users_data" == *"users"* ]]; then
                        echo "✅ User retrieval test passed"
                    else
                        echo "📄 Users data preview: ${users_data:0:100}..."
                    fi
                    
                    # Test admin endpoints
                    echo "👨‍💼 Testing admin functionality..."
                    logs_data=$(curl -s http://localhost:3000/admin/stats)
                    if [[ "$logs_data" == *"users"* ]] || [[ "$logs_data" == *"logs"* ]]; then
                        echo "✅ Admin endpoints responding with data"
                    else
                        echo "📊 Admin stats preview: ${logs_data:0:100}..."
                    fi
                    
                    echo "✅ Database validation completed"
                '''
            }
        }
    }
    
    post {
        always {
            echo "🏁 === PIPELINE EXECUTION COMPLETED ==="
            echo "📊 Build Number: ${BUILD_NUMBER}"
            echo "🕐 Build Duration: ${currentBuild.durationString}"
        }
        
        success {
            echo "🎉 === PIPELINE SUCCEEDED ==="
            echo "✅ Express application with SQLite database deployed successfully!"
            echo "🌐 Application URL: http://localhost:3000"
            echo "📊 Available endpoints:"
            echo "   - GET /health (Health check)"
            echo "   - GET /users (View all users)"
            echo "   - POST /users (Create new user)"
            echo "   - GET /admin/logs (Activity logs)"
            echo "   - GET /admin/stats (Database statistics)"
            echo "   - GET /api (API information)"
            echo "🗄️ Database: SQLite with full CRUD operations"
            echo "🧪 Tests: Jest test suite with coverage reports"
            echo "🐳 Docker: Container ready for deployment"
        }
        
        failure {
            echo "💥 === PIPELINE FAILED ==="
            echo "❌ Deployment failed. Check the logs above for details."
            script {
                try {
                    sh '''
                        echo "📄 Application logs (last 20 lines):"
                        tail -20 app.log || echo "No application logs available"
                    '''
                } catch (Exception e) {
                    echo "Could not retrieve application logs"
                }
            }
        }
        
        cleanup {
            echo "🧹 === CLEANING UP ==="
            sh '''
                echo "🗑️ Cleaning up temporary files..."
                # Add any cleanup commands here if needed
            '''
        }
    }
}
